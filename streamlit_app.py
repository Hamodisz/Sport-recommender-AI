
import streamlit as st
import openai
import os

st.set_page_config(page_title="Sport Recommender", layout="centered")

# ๐ก ุงุฎุชูุงุฑ ุงููุบุฉ
language = st.selectbox("ุงุฎุชุฑ ุงููุบุฉ / Choose Language", ["ุงูุนุฑุจูุฉ", "English"])

# ๐ข ุฅุฏุฎุงู ููุชุงุญ OpenAI
api_key = st.text_input("๐ ุฃุฏุฎู ููุชุงุญ OpenAI API", type="password")
if api_key:
    openai.api_key = api_key
    os.environ["OPENAI_API_KEY"] = api_key

# ๐ฃ ุงูุฃุณุฆูุฉ
questions = [
    "ูู ูุงูุช ุนูุฏู ุณุงุนุฉ ูุฑุงุบ ุจุนุฏ ููู ุทูููุ ุฃู ููุน ูู ุงููุดุงุทุงุช ุชุฑุชุงุญ ูู ุฃูุซุฑุ",
    "ุฃู ูุตู ูุทุงุจู ุดุนูุฑู ุชุฌุงู ุงููุบุงูุฑุงุชุ",
    "ูู ุณุจู ูุฌุฑุจุช ุฑูุงุถุฉ ูู ูุจู ูุงุณุชูุชุนุช ูููุงุ",
    "ูู ููุช ูู ุนุทูุฉ ููุงูุฉ ุงูุฃุณุจูุนุ ุฃู ููุน ูู ุงูุชุฌุงุฑุจ ุชูุถูุ",
    "ุฃู ูู ุงูุชุงูู ููุซู ุจูุฆุชู ุงูุญุงููุฉุ",
    "ููู ุชุตู ูุณุชูู ููุงูุชู ุงูุจุฏููุฉ ุญุงูููุงุ",
    "ูู ุชูุถู ุงูุชุญุฏูุงุช ุงููุฑุฏูุฉ ุฃู ุงูุฌูุงุนูุฉุ",
    "ููู ุชุชุนุงูู ูุน ุงูุฎูู ุฃู ุงูุถุบุทุ",
    "ูู ุชุญุจ ุงูููุงูุณุฉุ",
    "ุฃู ูู ุงูุชุงูู ูุนุฌุจู ุฃูุซุฑุ",
    "ููู ุชุดูู ููุณู ูู ูุงุญูุฉ ุงูุตุจุฑุ",
    "ูู ุชุญุจ ุชุชุนูู ููุงุฑุฉ ุฌุฏูุฏุฉ ุญุชู ูู ูุงูุช ุตุนุจุฉุ",
    "ูู ุชุนุชุจุฑ ููุณู ุงุฌุชูุงุนู ุฃู ุงูุนุฒุงููุ",
    "ูู ุชูุถู ุชุฎุทูุท ุงูููู ุจุฏูุฉ ุฃู ุชุฑูุญ ูุน ุงูุชูุงุฑุ",
    "ูู ุชุญุจ ุงูุทุจูุนุฉุ",
    "ูู ุชูุถู ุงูุฑูุงุถุงุช ูู ุงูุฃูุงูู ุงููุบููุฉ ุฃู ุงูููุชูุญุฉุ",
    "ูู ุชุญุจ ุงููุนุจ ุจุณุฑุนุฉ ุฃู ุจุฑุงุญุฉุ",
    "ุฃู ูู ุงูุชุงูู ููุซู ุฃุณููุจู ูู ุงูุญูุงุฉุ",
    "ูู ุชุณุชูุชุน ุจุงูุชูุฑุงุฑ ูุงูุชุทููุฑ ุฃู ุชุญุจ ุงูุชููุน ูุงูุชุบููุฑุ",
    "ูู ุชุนุชุจุฑ ุงูุชุญูู ูู ุงูููุณ ููุทุฉ ููุฉ ุนูุฏูุ"
]

answers = []

# ๐ ุนุฑุถ ุงูุฃุณุฆูุฉ ููุฑุจุนุงุช ุงุฎุชูุงุฑ
for q in questions:
    answer = st.radio(q, ["ุฃ", "ุจ", "ุฌ", "ุฏ", "ุบูุฑ ุฐูู - ุฃูุชุจ ุฑุฃูู"], key=q)
    answers.append(answer)

# ๐ ุฒุฑ ุงูุฅุฑุณุงู
if st.button("๐ ุงุญุตู ุนูู ุงูุชูุตูุฉ ุงูุฑูุงุถูุฉ"):
    with st.spinner("ูุชู ุชุญููู ุฅุฌุงุจุงุชู..."):

        messages = [
            {"role": "system", "content": "ุฃูุช ูุณุงุนุฏ ุฐูู ูุชุฎุตุต ูู ุงูุชุฑุงุญ ุงูุฑูุงุถุฉ ุงูููุงุณุจุฉ ุจูุงุกู ุนูู ุดุฎุตูุฉ ุงููุณุชุฎุฏู. ุงุณุชุฎุฏู ุนูู ุงูููุณ ุงูุฑูุงุถู ููุธุฑูุงุช ุงูุดุฎุตูุฉ."},
            {"role": "user", "content": f"ุงูุฅุฌุงุจุงุช: {answers}. ุฃุนุทูู ุงุณู ุฑูุงุถุฉ ูุงุญุฏุฉ ุชูุงุณุจู ูููุงุฐุง."}
        ]

        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=messages
            )
            result = response.choices[0].message.content
            st.success("โจ ุงูุชูุตูุฉ ุงูุฑูุงุถูุฉ:")
            st.write(result)
        except Exception as e:
            st.error(f"โ ุญุฏุซ ุฎุทุฃ: {e}")
